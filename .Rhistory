dx <- function(y, mi) {
out <- ((y - mi)^2)/mi^2*y
return(out)
}
mi <- 3
plot(y ~ x, type = 'l')
y <- seq(-3,3)
dx <- function(y, mi) {
out <- ((y - mi)^2)/mi^2*y
return(out)
}
mi <- 30
plot(y ~ x, type = 'l')
y <- seq(-3,3)
dx <- function(y, mi) {
out <- ((y - mi)^2)/mi^2*y
return(out)
}
mi <- 30
plot(y ~ mi, type = 'l')
mi <- -1
# Definir a função dx(y, mi)
dx <- function(y, mi) {
out <- ((y - mi)^2)/mi^2*y
return(out)
}
# Definir o intervalo de valores para y e um valor para mi
y <- seq(-10, 10, by=0.1)
# Calcular os valores de dx(y, mi)
dx_values <- numeric(length(y))
for (i in seq_along(y)) {
dx_values[i] <- dx(y[i], mi)
}
# Plotar os valores de dx(y, mi) em relação a y
plot(y, dx_values, type = "l", xlab = "x", ylab = "dx(y, mi)")
# Adicionar um título para o gráfico
title(main = "MI -1")
mi <- 2
# Definir a função dx(y, mi)
dx <- function(y, mi) {
out <- ((y - mi)^2)/mi^2*y
return(out)
}
# Definir o intervalo de valores para y e um valor para mi
y <- seq(-10, 10, by=0.1)
# Calcular os valores de dx(y, mi)
dx_values <- numeric(length(y))
for (i in seq_along(y)) {
dx_values[i] <- dx(y[i], mi)
}
# Plotar os valores de dx(y, mi) em relação a y
plot(y, dx_values, type = "l", xlab = "x", ylab = "dx(y, mi)")
# Adicionar um título para o gráfico
title(main = "MI 2")
mi <- 2
# Definir a função dx(y, mi)
dx <- function(y, mi) {
out <- ((y - mi)^2)/mi^2*y
return(out)
}
# Definir o intervalo de valores para y e um valor para mi
y <- seq(-10, 10)
# Calcular os valores de dx(y, mi)
dx_values <- numeric(length(y))
for (i in seq_along(y)) {
dx_values[i] <- dx(y[i], mi)
}
# Plotar os valores de dx(y, mi) em relação a y
plot(y, dx_values, type = "l", xlab = "x", ylab = "dx(y, mi)")
# Adicionar um título para o gráfico
title(main = "MI 2")
mi <- -2
# Definir a função dx(y, mi)
dx <- function(y, mi) {
out <- ((y - mi)^2)/mi^2*y
return(out)
}
# Definir o intervalo de valores para y e um valor para mi
y <- seq(-10, 10)
# Calcular os valores de dx(y, mi)
dx_values <- numeric(length(y))
for (i in seq_along(y)) {
dx_values[i] <- dx(y[i], mi)
}
# Plotar os valores de dx(y, mi) em relação a y
plot(y, dx_values, type = "l", xlab = "x", ylab = "dx(y, mi)")
# Adicionar um título para o gráfico
title(main = "MI -2")
1/x^3 == x^-3
fx(2)
fx <- function(x){1/x^3 == x^-3}
fx(2)
1/2^3
2^-3
fx <- function(x){-3/x^4 == x^-3}
fx(2)
fx <- function(x){1/x^3 == x^-3}
fx(2)
fx <- function(x){-3*x^-4 == -3/x^4}
fx(2)
fx <- function(x){sqrt(x) == x^(1/2)}
fx(2)
fx <- function(x){1/2*x^1/2-1 == x^(1/2)}
fx(2)
fx <- function(x){1/2*x^1/2-1 == -(1/2*sqrt(x))}
fx(2)
fx <- function(x){1/2*x^1/2-1 == (2/sqrt(x))}
fx(2)
fx <- function(x){1/2*x^1/2-1 == 1/sqrt(x)}
fx(2)
fx <- function(x){1/2*x^1/2-1 == 1/2*sqrt(x)}
fx(2)
fx <- function(x){1/2*x^1/2-1 == 1/-(2*sqrt(x))}
fx(2)
(1/2)-1
x^-0.5
1/2 - 1 == -1/2
x^1/2-1==x^-1/2
x^1/2-1==x^1/2
x^(1/2-1)==x^(1/2)
x^(1/2-1)==x^(-1/2)
x^(1/2-1)=x^(-1/2)
fx <- function(x){(1/2)*x^(1/2-1) == 1/-(2*sqrt(x))}
fx(2)
-sqrt(x)==x^(-1/2)
sqrt(x)==x^(-1/2)
sqrt(x)==x^(1/2)
sqrt(x)==x^-(1/2)
sqrt(x) == x^-(1/2)
fx <- function(x){(x-1)^2 == (x-1)*()x-1 }
fx <- function(x){(x-1)^2 == (x-1)*()x-1) }
fx <- function(x){(x-1)^2 == (x-1)*(x-1) }
fx(2)
(x-1)^2 == (x-1)*(x-1)
A <- matrix(c(1.00, 0.89, 0.89, 0.85,0.89, 1.00, 0.85, 0.89,
0.89, 0.85, 1.00, 0.89,0.85, 0.89, 0.89, 1.00),4,4)
determinant(A, logarithm = FALSE)$modulus
# 1.00 0.89 0.89 0.85
# 0.89 1.00 0.85 0.89
# 0.89 0.85 1.00 0.89
# 0.85 0.89 0.89 1.00
A <- matrix(c(1.00, 0.89, 0.89, 0.85,0.89, 1.00, 0.85, 0.89,
0.89, 0.85, 1.00, 0.89,0.85, 0.89, 0.89, 1.00),4,4)
determinant(A, logarithm = FALSE)$modulus
sum(diag(A))
# 1.00 0.89 0.89 0.85
# 0.89 1.00 0.85 0.89
# 0.89 0.85 1.00 0.89
# 0.85 0.89 0.89 1.00
A
c(1,2,3) == c(3,2,1)
gauss <- function(A, b) {
Ae <- cbind(A, b) ## Sistema aumentado
rownames(Ae) <- paste0("x", 1:length(b))
n_row <- nrow(Ae)
n_col <- ncol(Ae)
SOL <- matrix(NA, n_row, n_col) ## Matriz para receber os resultados
SOL[1,] <- Ae[1,]
pivo <- matrix(0, n_col, n_row)
for(j in 1:c(n_row-1)) {
for(i in c(j+1):c(n_row)) {
pivo[i,j] <- Ae[i,j]/SOL[j,j]
SOL[i,] <- Ae[i,] - pivo[i,j]*SOL[j,]
Ae[i,] <- SOL[i,]
}
}
return(SOL)
}
Ae
A <- matrix(c(11, 12, 6, 20,9, 9, 11, 16, 10, 13, 13, 10, 11, 11, 9,
11, 10 , 15, 9, 1),5,5)
B <- matrix(c(16,11,12,9,11,2,11,8,6,17,9,10,9,15,8,5,15,14,8,13,9,5,7,7,10),5,5)
determinant(A, logarithm = FALSE)$modulus
sum(diag(A))
A
c(1,2,3) == c(3,2,1)
# 1.00 0.89 0.89 0.85
# 0.89 1.00 0.85 0.89
# 0.89 0.85 1.00 0.89
# 0.85 0.89 0.89 1.00
A*B
C <- A*B
sum(C)
c <- a*b
sum(c)
c
c <- a*b
#produto interno vetores----------------------------------------------------
a <- c(14,9,8,8,8)
b <- c(6,8,7,10,17)
c <- a*b
c
sum(c)
#determinante e traço-------------------------------------------------------
questao_12 <- matrix(c(10,10,8,12,13,
11,7,9,7,6,
14,10,12,10,5
6,9,14,7,12),5,5)
determinant(A, logarithm = FALSE)$modulus
sum(diag(A))
determinant(questao_12, logarithm = FALSE)$modulus
sum(diag(A))
#determinante e traço-------------------------------------------------------
questao_12 <- matrix(c(10,10,8,12,13,
11,7,9,7,6,
14,10,12,10,5
6,9,14,7,12),5,5)
determinant(questao_12, logarithm = FALSE)$modulus
sum(diag(A))
#determinante e traço-------------------------------------------------------
q <- matrix(c(10,10,8,12,13,
11,7,9,7,6,
14,10,12,10,5
6,9,14,7,12),5,5)
#determinante e traço-------------------------------------------------------
q_doze <- matrix(c(10,10,8,12,13,
11,7,9,7,6,
14,10,12,10,5
6,9,14,7,12),5,5)
determinant(q_doze, logarithm = FALSE)$modulus
sum(diag(A))
#determinante e traço-------------------------------------------------------
q_doze <- matrix(c(10,10,8,12,13,
11,7,9,7,6,
14,10,12,10,5
6,9,14,7,12),5,5)
#determinante e traço-------------------------------------------------------
q_doze <- matrix(c(10,10,8,12,13,
11,7,9,7,6,
14,10,12,10,5,
6,9,14,7,12),5,5)
#determinante e traço-------------------------------------------------------
q_doze <- matrix(c(10,10,8,12,13,
11,7,9,7,6,
14,10,12,10,5,
14,13,10,8,7,
6,9,14,7,12),5,5)
determinant(q_doze, logarithm = FALSE)$modulus
sum(diag(A))
#multiplicação escalar------------------------------------------------------
a <- c(9,16,6,8,8)
alpha = 13
b <- alpha*a
sum()b
sum(b)
dados <- read.csv(dados)
dados <- read.csv(dados.csv)
dados
dados <- read.csv(dados.csv)
dados <- read.csv("dados.csv")
dados
dados <- read.csv("C:\Users\fabio\Documents\alura\estatistica_com_r\dados.csv")
dados
source("C:/Users/fabio/Documents/alura/estatistica_com_r/parte_1.R", echo=TRUE)
dados <- read.csv('dados.csv')
dados
source("C:/Users/fabio/Documents/alura/estatistica_com_r/parte_1.R", echo=TRUE)
library()
library(dplyr)
install.packages("dplyr")
library(dplyr)
sessionInfo()
head(dados, 10)
select(dados, Anos.de.Estudo)
head(select(dados, Anos.de.Estudo), 10)
head(select(dados, Anos.de.Estudo),10)
unique(dados, Anos.de.Estudo)
head(dados, 10)
head(select(dados, Anos.de.Estudo),10)
unique(dados, Anos.de.Estudo)
head(dados, 10)
head(select(dados, Anos.de.Estudo),10)
unique(dados, Anos.de.Estudo)
unique(select(dados, Anos.de.Estudo))
arrange(unique(select(dados, Anos.de.Estudo)))
arrange(unique(select(dados, Anos.de.Estudo)))
arrange(unique(select(dados, Anos.de.Estudo)), Anos.de.Estudo)
sprintf('De %s até %s anos', min((dados$Idade), max(dados$Idade)))
sprintf('De %s até %s anos', min((dados$Idade), max(dados$Idade))
idades <- sprintf('De %s até %s anos', min((dados$Idade), max(dados$Idade))
idades <- sprintf('De %s até %s anos', min(dados$Idade), max(dados$Idade))
idades
library(glue)
install.packages('glue')
install.packages("glue")
library(glue)
library('glue')
library('glue')
library(glue)
glue('De {min(dados$Idade)} até max(dados$Idade) anos')
glue('De {min(dados$Idade)} até {max(dados$Idade)} anos')
table(dados$Sexo)
prop.table(table(dados$Sexo))
prop.table(table(dados$Sexo))*100
dist_freq_qualitativa <- cbind(freq = table(dados$Sexo), percent = prop.table(table(dados$Sexo))*100)
dist_freq_qualitativa
dist_freq_qualitativas <- cbind(freq = table(dados$Sexo), percent = prop.table(table(dados$Sexo))*100)
dist_freq_qualitativas
colnames(dist_freq_qualitativas)
colnames(dist_freq_qualitativas) <- c('Frequência', 'Porcentagem')
row.names(dist_freq_qualitativas) <- c('Masculino', "Feminino")
dist_freq_qualitativas
colnames(dist_freq_qualitativas) <- c('Frequência', 'Porcentagem')
row.names(dist_freq_qualitativas) <- c('Masculino', "Feminino")
dist_freq_qualitativas
table(dados)
dados <- c(1, 2, 3, 1, 2, 2, 2, 3, 3, 2, 1, 3)
table(dados)
table(dados$Sexo)
prop.table(table(dados$Sexo))*100
dist_freq_qualitativas <- cbind(freq = table(dados$Sexo), percent = prop.table(table(dados$Sexo))*100)
colnames(dist_freq_qualitativas) <- c('Frequência', 'Porcentagem')
row.names(dist_freq_qualitativas) <- c('Masculino', "Feminino")
dist_freq_qualitativas
dados <- read.csv("C:/Users/fabio/Documents/alura/estatistica_com_r/dados.csv")
dados
install.packages("dplyr")
library(dplyr)
sessionInfo()
head(dados, 10)
head(select(dados, Anos.de.Estudo),10)
unique(select(dados, Anos.de.Estudo))
arrange(unique(select(dados, Anos.de.Estudo)), Anos.de.Estudo)
idades <- sprintf('De %s até %s anos', min(dados$Idade), max(dados$Idade))
idades
install.packages('glue')
library(glue)
glue('De {min(dados$Idade)} até {max(dados$Idade)} anos')
table(dados$Sexo)
prop.table(table(dados$Sexo))*100
dist_freq_qualitativas <- cbind(freq = table(dados$Sexo), percent = prop.table(table(dados$Sexo))*100)
colnames(dist_freq_qualitativas) <- c('Frequência', 'Porcentagem')
row.names(dist_freq_qualitativas) <- c('Masculino', "Feminino")
dist_freq_qualitativas
install.packages("glue")
install.packages("dplyr")
table(dados$Sexo)
prop.table(table(dados$Sexo))*100
dados <- c(1, 2, 3, 1, 2, 2, 2, 3, 3, 2, 1, 3)
table(dados)
dados <- c(1, 2, 3, 1, 2, 2, 2, 3, 3, 2, 1, 3)
table(dados)
dist_freq <- cbind(frequ = table(dados), Percent = prop.table(table(dados))*100)
dist_freq
row.names(dist_freq) <- c("Estatístico", "Cientista de Dados", "Programador R")
dist_freq
dados <- read.csv("C:/Users/fabio/Documents/alura/estatistica_com_r/dados.csv")
dist_freq_altura[
order(row.names(dist_freq_altura)),
]
dados <- read.csv("C:/Users/fabio/Documents/alura/estatistica_com_r/dados.csv")
classes <- c(min(dados$Altura), 1.65, 1.75, max(dados$Altura))
labels <- c('1 - Baixa', '2 - Média', '3 - Alta')
frequencia <- table(
cut(
x = dados$Altura,
breaks = classes,
labels = labels,
include.lowest = TRUE
)
)
percentual <- prop.table(frequencia) * 100
dist_freq_altura <- cbind('Frequência' = frequencia, 'Porcentagem (%)' = percentual)
dist_freq_altura[
order(row.names(dist_freq_altura)),
]
option(repr.plot.width = 7, repr.plot.height = 4)
options(repr.plot.width = 7, repr.plot.height = 4)
hist(dados$Altura)
hist(
x = dados$Altura,
breaks = "Sturges",
col = 'lightblue',
main = 'Histograma das Alturas',
xlab = 'Altura',
ylab = 'Frequência'
)
x
x
x
x
x
x <- c(1,3,2,5)
x
x <- matrix(data = c(1,2,3,4), nrow = 2, ncol = 2)
x
y <- matrix(data = c(1,2,3,4), nrow = 2, ncol = 2, byrow = TRUE)
y
matrix(data = c(1,2,3,4), nrow = 2, ncol = 2, byrow = TRUE)
sqrt(x)
x^2
x <- seq(-pi, pi, length =50)
x
y <- x
f <- outer(x,y, function(x,y) cos(y)/(1+x^2))
contour(x,y,f)
contour(x,y,f,nlevels = 45, add = T)
fa <- (f - t(f)) /2
contour(x,y,fa,nlevels = 15)
image(x,y,f)
Auto <- read.table("Auto.data")
Auto <- read.table("Auto.data")
Auto <- read.table("Auto")
Auto <- read.table("Auto.data")
view(Auto)
View(Auto)
Auto <- read.table("Auto.data")
View(Auto)
Auto.data <- read.delim("C:/Users/fabio/Desktop/dsbd/statlearning_livro/Auto.data")
View(Auto.data)
Auto <- read.table("Auto.data")
setwd("C:/Users/fabio/Desktop/dsbd/statlearning_livro")
Auto <- read.table("/Desktop/dsbd/statlearning_livro/Auto.data")
View(Auto)
Auto <- read.table("/Desktop/dsbd/statlearning_livro/Auto.data")
Auto <- read.table("Auto.data")
View(Auto)
head(Auto)
Auto <- read.table("Auto.data", header =T, na.strings = "?")
View(Auto)
head(Auto)
Auto <- read.table("Auto.data", header =T, na.strings = "?", stringsAsFactors = T)
View(Auto)
head(Auto)
head(Auto, 20)
dim(Auto)
View(Auto)
names(Auto)
plot(Auto$mpg, Auto$cylinders)
attach(Auto)
View(Auto$mpg)
attach(Auto)
plot(cylinders, mpg)
cylinders <- as.factor(cylinders)
plot(cylinders, mpg)
plot(cylinders, mpg, col = 'red', varwidth = T)
hist(Auto, col = 2, breaks = 15)
hist(mpg, col = 2, breaks = 15)
pairs(Auto)
pair()
pairs()
~ mpg + displacement + horsepower + weight + aceleration, data = Auto
pairs(
~ mpg + displacement + horsepower + weight + aceleration,
data = Auto
)
pairs(
~ mpg + displacement + horsepower + weight + acceleration,
data = Auto
)
plot(horsepower, mpg)
attach(Auto)
plot(horsepower, mpg)
identity(horsepower, mpg)
identity(horsepower, mpg, name)
identity(horsepower, mpg, name)
names(Auto)
plot(horsepower, mpg)
identity(horsepower, mpg, name)
Auto <- read.table("Auto.data", header =T, na.strings = "?", stringsAsFactors = T)
attach(Auto)
plot(horsepower, mpg)
identity(horsepower, mpg, name)
Auto <- read.table("Auto.data", header =T, na.strings = "?", stringsAsFactors = T)
attach(Auto)
plot(horsepower, mpg)
identity(horsepower, mpg, name)
identity(horsepower, mpg, labels = name)
identity(Auto$horsepower, Auto$mpg, labels = Auto$name)
plot(horsepower, mpg)
# Crie um conjunto de dados de exemplo
dados <- data.frame(
Carro = c("Carro1", "Carro2", "Carro3", "Carro4", "Carro5"),
Horsepower = c(150, 200, 120, 180, 210),
MPG = c(20, 18, 25, 22, 17)
)
# Crie um gráfico de dispersão (scatter plot) de Horsepower vs. MPG
plot(dados$Horsepower, dados$MPG, pch = 19, xlim = c(0, 250), ylim = c(0, 30), xlab = "Horsepower", ylab = "MPG")
# Use a função identify para identificar pontos no gráfico
identify(dados$Horsepower, dados$MPG, labels = dados$Carro, n = 1)
# Após rodar esse código, o gráfico será exibido, e você poderá clicar com o mouse em pontos no gráfico para identificá-los.
# Quando você clicar em um ponto, o rótulo do carro correspondente será exibido.
# Crie um conjunto de dados de exemplo
dados <- data.frame(
Carro = c("Carro1", "Carro2", "Carro3", "Carro4", "Carro5"),
Horsepower = c(150, 200, 120, 180, 210),
MPG = c(20, 18, 25, 22, 17)
)
# Crie um gráfico de dispersão (scatter plot) de Horsepower vs. MPG
plot(dados$Horsepower, dados$MPG, pch = 19, xlim = c(0, 250), ylim = c(0, 30), xlab = "Horsepower", ylab = "MPG")
# Use a função identify para identificar pontos no gráfico
identify(dados$Horsepower, dados$MPG, labels = dados$Carro, n = 1)
# Após rodar esse código, o gráfico será exibido, e você poderá clicar com o mouse em pontos no gráfico para identificá-los.
# Quando você clicar em um ponto, o rótulo do carro correspondente será exibido.
identity(Auto$horsepower, Auto$mpg, labels = Auto$name, n = 1)
names(Auto)
identity(horsepower, mpg, labels = name, n = 1)
Auto <- read.table("Auto.data", header =T, na.strings = "?", stringsAsFactors = T)
attach(Auto)
plot(horsepower, mpg)
identity(horsepower, mpg, labels = name, n = 1)
identity(horsepower, mpg, labels = name)
identity(horsepower, mpg, name,)
identity(horsepower, mpg, name)
identity(horsepower, mpg)
Auto <- read.table("Auto.data", header =T, na.strings = "?", stringsAsFactors = T)
attach(Auto)
plot(horsepower, mpg)
identify(horsepower, mpg, name)
summary(Auto)
summary(mpg)
summary(name)
